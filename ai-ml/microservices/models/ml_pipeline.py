# ml_pipeline.py

"""
ml_pipeline.py

Handles the machine learning pipeline, including data preprocessing,
model training, and encryption integration.
"""

import os
import json
from typing import Any, Dict
from .llm_handler import LLMHandler
from .vector_store import VectorStore
from ..utils.logger import get_logger
from ..utils.errorHandler import AppError

logger = get_logger(__name__)

class MLPipeline:
    def __init__(self, config: dict):
        self.config = config
        self.llm_handler = LLMHandler(config)
        self.vector_store = VectorStore(config)
        self.model = self.load_model()

    def load_model(self):
        """
        Loads the ML model from disk or initializes a new model.
        """
        model_path = self.config.get("model_path", "models/model.pkl")
        if os.path.exists(model_path):
            with open(model_path, "rb") as f:
                import pickle
                model = pickle.load(f)
            logger.info(f"Model loaded from {model_path}")
        else:
            from sklearn.linear_model import LogisticRegression
            model = LogisticRegression()
            logger.info("Initialized new ML model.")
        return model

    def save_model(self):
        """
        Saves the ML model to disk.
        """
        model_path = self.config.get("model_path", "models/model.pkl")
        with open(model_path, "wb") as f:
            import pickle
            pickle.dump(self.model, f)
        logger.info(f"Model saved to {model_path}")

    def preprocess_data(self, raw_data: str) -> Any:
        """
        Preprocesses raw data for model training.

        Args:
            raw_data: Raw plaintext data.

        Returns:
            Preprocessed data suitable for training.
        """
        # Placeholder: Implement actual preprocessing logic
        logger.info("Preprocessing data...")
        preprocessed_data = raw_data.lower()  # Example: Convert to lowercase
        logger.debug(f"Preprocessed data: {preprocessed_data}")
        return preprocessed_data

    def train_on_data(self, preprocessed_data: Any) -> None:
        """
        Trains the model on preprocessed data.

        Args:
            preprocessed_data: Data ready for model training.
        """
        # Placeholder: Implement actual training logic
        logger.info("Training model on preprocessed data...")
        # Example: Dummy training
        X = [[0], [1]]
        y = [0, 1]
        self.model.fit(X, y)
        self.save_model()
        logger.info("Model training completed.")

    def run_pipeline(self, raw_data: str) -> None:
        """
        Runs the full ML pipeline: preprocessing and training.

        Args:
            raw_data: Raw plaintext data.
        """
        try:
            preprocessed_data = self.preprocess_data(raw_data)
            self.train_on_data(preprocessed_data)
            logger.info("ML pipeline run successfully.")
        except Exception as e:
            logger.error(f"Error during ML pipeline run: {e}")
            raise AppError("ML pipeline run failed") from e

    def generate_embeddings(self, data: str) -> Any:
        """
        Generates embeddings for the given data using LLM.

        Args:
            data: Preprocessed data.

        Returns:
            Embeddings generated by LLM.
        """
        try:
            embeddings = self.llm_handler.generate_embeddings(data)
            logger.info("Embeddings generated successfully.")
            return embeddings
        except AppError as e:
            logger.error(f"Failed to generate embeddings: {e}")
            raise e

    def store_embeddings(self, data_id: str, embeddings: Any) -> None:
        """
        Stores embeddings in the vector store.

        Args:
            data_id: Unique identifier for the data.
            embeddings: Embedding vector.
        """
        try:
            self.vector_store.store(data_id, embeddings)
            logger.info(f"Embeddings stored successfully for data_id: {data_id}")
        except AppError as e:
            logger.error(f"Failed to store embeddings: {e}")
            raise e

    def retrieve_similar_data(self, query: str) -> List[str]:
        """
        Retrieves data IDs of similar data based on query embeddings.

        Args:
            query: Query string to find similar data.

        Returns:
            List of data IDs with similar embeddings.
        """
        try:
            query_embeddings = self.llm_handler.generate_embeddings(query)
            similar_data_ids = self.vector_store.query(query_embeddings)
            logger.info(f"Retrieved {len(similar_data_ids)} similar data IDs.")
            return similar_data_ids
        except AppError as e:
            logger.error(f"Failed to retrieve similar data: {e}")
            raise e
